/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kratz.mc.loader.gui;

import org.kratz.mc.loader.Loader;
import org.kratz.mc.locale.Messages;

/**
 * Loader Activity Window.
 */
public class LoaderWindow extends javax.swing.JFrame implements LoaderUIContext.Access {

    private final LoaderUIContext uiCtx;

    /**
     * Creates new LoaderWindow.
     * @param uiCtx loader window UI context
     */
    public LoaderWindow(final LoaderUIContext uiCtx) {
        this.uiCtx = uiCtx;
        initComponents();
        hideProgressBar();
    }

    /**
     * Update displayed action {@code String}.
     */
    @Override
    public final void updateAction() {
        action.setText(uiCtx.getAction());
    }

    /**
     * Update displayed description {@code String}.
     */
    @Override
    public final void updateDescription() {
        description.setText(uiCtx.getDescription());
    }

    /**
     * Display progress bar and initialize it.
     * @param minValue Minimum progress bar value.
     * @param maxValue Maximum progress bar value.
     */
    @Override
    public final void showProgressBar(final int minValue, final int maxValue) {
        progress.setMinimum(minValue);
        progress.setMaximum(maxValue);
        progress.setValue(minValue);
        progress.setEnabled(true);
        progress.setVisible(true);
    }

    /**
     * Hide progress bar and reset it.
     */
    @Override
    public final void hideProgressBar() {
        progress.setEnabled(false);
        progress.setVisible(false);
        progress.setMinimum(0);
        progress.setMaximum(100);
        progress.setValue(0);
    }

    /**
     * Update displayed progress bar.
     * @param value Current progress bar value.
     */
    @Override
    public final void updateProgressBar(final int value) {
        progress.setValue(value);
    }

    /**
     * Shut down UI component.
     */
    @Override
    public final void exit() {
        this.setVisible(false);
        this.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        action = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        description = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(Messages.get("ui.label.title")+" "+Loader.getVersion());
        setBackground(new java.awt.Color(153, 153, 153));
        setMaximumSize(new java.awt.Dimension(640, 70));
        setMinimumSize(new java.awt.Dimension(640, 70));
        setResizable(false);

        action.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        action.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        action.setText(uiCtx.getAction());

        description.setText(uiCtx.getAction());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(description, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(action, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(action)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(description)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel action;
    private javax.swing.JLabel description;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables
}
